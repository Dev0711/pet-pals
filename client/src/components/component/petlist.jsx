/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/5sDDu5du4rl
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

/** Add fonts into your Next.js project:

import { Gabarito } from 'next/font/google'

gabarito({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client";

import { useState, useMemo } from "react";
import { Accordion, AccordionItem, AccordionTrigger, AccordionContent } from "@/components/ui/accordion";
import { Label } from "@/components/ui/label";
import { Checkbox } from "@/components/ui/checkbox";
import {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuItem,
} from "@/components/ui/dropdown-menu";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Pagination } from "@/components/ui/pagination";

export function Petlist() {
  const [filters, setFilters] = useState({
    type: [],
    size: [],
    age: [],
    gender: [],
  });
  const [searchTerm, setSearchTerm] = useState("");
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage] = useState(8);
  const pets = [
    {
      id: 1,
      name: "Buddy",
      type: "Dog",
      size: "Medium",
      age: 3,
      gender: "Male",
      image: "/placeholder.svg",
    },
    {
      id: 2,
      name: "Whiskers",
      type: "Cat",
      size: "Small",
      age: 2,
      gender: "Female",
      image: "/placeholder.svg",
    },
    {
      id: 3,
      name: "Daisy",
      type: "Dog",
      size: "Large",
      age: 5,
      gender: "Female",
      image: "/placeholder.svg",
    },
    {
      id: 4,
      name: "Simba",
      type: "Cat",
      size: "Medium",
      age: 1,
      gender: "Male",
      image: "/placeholder.svg",
    },
    {
      id: 5,
      name: "Bella",
      type: "Dog",
      size: "Small",
      age: 4,
      gender: "Female",
      image: "/placeholder.svg",
    },
    {
      id: 6,
      name: "Max",
      type: "Dog",
      size: "Large",
      age: 7,
      gender: "Male",
      image: "/placeholder.svg",
    },
    {
      id: 7,
      name: "Luna",
      type: "Cat",
      size: "Small",
      age: 2,
      gender: "Female",
      image: "/placeholder.svg",
    },
    {
      id: 8,
      name: "Charlie",
      type: "Dog",
      size: "Medium",
      age: 4,
      gender: "Male",
      image: "/placeholder.svg",
    },
    {
      id: 9,
      name: "Cleo",
      type: "Cat",
      size: "Medium",
      age: 3,
      gender: "Female",
      image: "/placeholder.svg",
    },
    {
      id: 10,
      name: "Milo",
      type: "Dog",
      size: "Large",
      age: 6,
      gender: "Male",
      image: "/placeholder.svg",
    },
  ];
  const filteredPets = useMemo(() => {
    return pets.filter((pet) => {
      if (filters.type.length > 0 && !filters.type.includes(pet.type)) {
        return false;
      }
      if (filters.size.length > 0 && !filters.size.includes(pet.size)) {
        return false;
      }
      if (filters.age.length > 0 && !filters.age.includes(pet.age)) {
        return false;
      }
      if (filters.gender.length > 0 && !filters.gender.includes(pet.gender)) {
        return false;
      }
      return pet.name.toLowerCase().includes(searchTerm.toLowerCase());
    });
  }, [filters, searchTerm]);
  const handleFilterChange = (type, value) => {
    setFilters((prevFilters) => ({
      ...prevFilters,
      [type]: prevFilters[type].includes(value) ? prevFilters[type].filter((item) => item !== value) : [...prevFilters[type], value],
    }));
  };
  const handleSearch = (e) => {
    setSearchTerm(e.target.value);
    setCurrentPage(1);
  };
  const indexOfLastItem = currentPage * itemsPerPage;
  const indexOfFirstItem = indexOfLastItem - itemsPerPage;
  const currentItems = filteredPets.slice(indexOfFirstItem, indexOfLastItem);
  const totalPages = Math.ceil(filteredPets.length / itemsPerPage);
  const handlePageChange = (pageNumber) => {
    setCurrentPage(pageNumber);
  };
  return (
    <div className="container mx-auto py-8">
      <div className="flex flex-col md:flex-row items-start gap-6">
        <div className="w-full md:w-64 bg-background rounded-lg shadow-md p-4 hidden md:block">
          <h3 className="text-lg font-semibold mb-4">Filters</h3>
          <Accordion type="single" collapsible>
            <AccordionItem value="type">
              <AccordionTrigger className="text-base">Pet Type</AccordionTrigger>
              <AccordionContent>
                <div className="grid gap-2">
                  <Label className="flex items-center gap-2 font-normal">
                    <Checkbox checked={filters.type.includes("Dog")} onCheckedChange={() => handleFilterChange("type", "Dog")} />
                    Dog
                  </Label>
                  <Label className="flex items-center gap-2 font-normal">
                    <Checkbox checked={filters.type.includes("Cat")} onCheckedChange={() => handleFilterChange("type", "Cat")} />
                    Cat
                  </Label>
                </div>
              </AccordionContent>
            </AccordionItem>
            <AccordionItem value="size">
              <AccordionTrigger className="text-base">Pet Size</AccordionTrigger>
              <AccordionContent>
                <div className="grid gap-2">
                  <Label className="flex items-center gap-2 font-normal">
                    <Checkbox checked={filters.size.includes("Small")} onCheckedChange={() => handleFilterChange("size", "Small")} />
                    Small
                  </Label>
                  <Label className="flex items-center gap-2 font-normal">
                    <Checkbox checked={filters.size.includes("Medium")} onCheckedChange={() => handleFilterChange("size", "Medium")} />
                    Medium
                  </Label>
                  <Label className="flex items-center gap-2 font-normal">
                    <Checkbox checked={filters.size.includes("Large")} onCheckedChange={() => handleFilterChange("size", "Large")} />
                    Large
                  </Label>
                </div>
              </AccordionContent>
            </AccordionItem>
            <AccordionItem value="age">
              <AccordionTrigger className="text-base">Pet Age</AccordionTrigger>
              <AccordionContent>
                <div className="grid gap-2">
                  <Label className="flex items-center gap-2 font-normal">
                    <Checkbox checked={filters.age.includes(1)} onCheckedChange={() => handleFilterChange("age", 1)} />1 year
                  </Label>
                  <Label className="flex items-center gap-2 font-normal">
                    <Checkbox checked={filters.age.includes(2)} onCheckedChange={() => handleFilterChange("age", 2)} />2 years
                  </Label>
                  <Label className="flex items-center gap-2 font-normal">
                    <Checkbox checked={filters.age.includes(3)} onCheckedChange={() => handleFilterChange("age", 3)} />3 years
                  </Label>
                  <Label className="flex items-center gap-2 font-normal">
                    <Checkbox checked={filters.age.includes(4)} onCheckedChange={() => handleFilterChange("age", 4)} />4 years
                  </Label>
                  <Label className="flex items-center gap-2 font-normal">
                    <Checkbox checked={filters.age.includes(5)} onCheckedChange={() => handleFilterChange("age", 5)} />5 years
                  </Label>
                </div>
              </AccordionContent>
            </AccordionItem>
            <AccordionItem value="gender">
              <AccordionTrigger className="text-base">Pet Gender</AccordionTrigger>
              <AccordionContent>
                <div className="grid gap-2">
                  <Label className="flex items-center gap-2 font-normal">
                    <Checkbox checked={filters.gender.includes("Male")} onCheckedChange={() => handleFilterChange("gender", "Male")} />
                    Male
                  </Label>
                  <Label className="flex items-center gap-2 font-normal">
                    <Checkbox checked={filters.gender.includes("Female")} onCheckedChange={() => handleFilterChange("gender", "Female")} />
                    Female
                  </Label>
                </div>
              </AccordionContent>
            </AccordionItem>
          </Accordion>
        </div>
        <div className="w-full">
          <div className="mb-6 flex items-center gap-4">
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="outline" className="flex-1 md:hidden">
                  <FilterIcon className="w-4 h-4 mr-2" />
                  Filters
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent className="w-56">
                <DropdownMenuLabel>Filters</DropdownMenuLabel>
                <DropdownMenuSeparator />
                <DropdownMenuItem>
                  <div className="grid gap-2">
                    <Label className="flex items-center gap-2 font-normal">
                      <Checkbox checked={filters.type.includes("Dog")} onCheckedChange={() => handleFilterChange("type", "Dog")} />
                      Dog
                    </Label>
                    <Label className="flex items-center gap-2 font-normal">
                      <Checkbox checked={filters.type.includes("Cat")} onCheckedChange={() => handleFilterChange("type", "Cat")} />
                      Cat
                    </Label>
                  </div>
                </DropdownMenuItem>
                <DropdownMenuSeparator />
                <DropdownMenuItem>
                  <div className="grid gap-2">
                    <Label className="flex items-center gap-2 font-normal">
                      <Checkbox checked={filters.size.includes("Small")} onCheckedChange={() => handleFilterChange("size", "Small")} />
                      Small
                    </Label>
                    <Label className="flex items-center gap-2 font-normal">
                      <Checkbox checked={filters.size.includes("Medium")} onCheckedChange={() => handleFilterChange("size", "Medium")} />
                      Medium
                    </Label>
                    <Label className="flex items-center gap-2 font-normal">
                      <Checkbox checked={filters.size.includes("Large")} onCheckedChange={() => handleFilterChange("size", "Large")} />
                      Large
                    </Label>
                  </div>
                </DropdownMenuItem>
                <DropdownMenuSeparator />
                <DropdownMenuItem>
                  <div className="grid gap-2">
                    <Label className="flex items-center gap-2 font-normal">
                      <Checkbox checked={filters.age.includes(1)} onCheckedChange={() => handleFilterChange("age", 1)} />1 year
                    </Label>
                    <Label className="flex items-center gap-2 font-normal">
                      <Checkbox checked={filters.age.includes(2)} onCheckedChange={() => handleFilterChange("age", 2)} />2 years
                    </Label>
                    <Label className="flex items-center gap-2 font-normal">
                      <Checkbox checked={filters.age.includes(3)} onCheckedChange={() => handleFilterChange("age", 3)} />3 years
                    </Label>
                    <Label className="flex items-center gap-2 font-normal">
                      <Checkbox checked={filters.age.includes(4)} onCheckedChange={() => handleFilterChange("age", 4)} />4 years
                    </Label>
                    <Label className="flex items-center gap-2 font-normal">
                      <Checkbox checked={filters.age.includes(5)} onCheckedChange={() => handleFilterChange("age", 5)} />5 years
                    </Label>
                  </div>
                </DropdownMenuItem>
                <DropdownMenuSeparator />
                <DropdownMenuItem>
                  <div className="grid gap-2">
                    <Label className="flex items-center gap-2 font-normal">
                      <Checkbox checked={filters.gender.includes("Male")} onCheckedChange={() => handleFilterChange("gender", "Male")} />
                      Male
                    </Label>
                    <Label className="flex items-center gap-2 font-normal">
                      <Checkbox checked={filters.gender.includes("Female")} onCheckedChange={() => handleFilterChange("gender", "Female")} />
                      Female
                    </Label>
                  </div>
                </DropdownMenuItem>
              </DropdownMenuContent>
            </DropdownMenu>
            <Input placeholder="Search pets..." value={searchTerm} onChange={handleSearch} className="flex-1" />
          </div>
          <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
            {currentItems.map((pet) => (
              <div key={pet.id} className="bg-background rounded-lg shadow-md overflow-hidden">
                <img src="/placeholder.svg" alt={pet.name} width={300} height={200} className="w-full h-48 object-cover" />
                <div className="p-4">
                  <h3 className="text-lg font-semibold">{pet.name}</h3>
                  <div className="text-muted-foreground">
                    {pet.type} - {pet.size} - {pet.age} years old - {pet.gender}
                  </div>
                  <Button variant="outline" className="mt-4">
                    Adopt {pet.name}
                  </Button>
                </div>
              </div>
            ))}
          </div>
          <div className="flex justify-center mt-8">
            <Pagination currentPage={currentPage} totalPages={totalPages} onPageChange={handlePageChange} />
          </div>
        </div>
      </div>
    </div>
  );
}

function FilterIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <polygon points="22 3 2 3 10 12.46 10 19 14 21 14 12.46 22 3" />
    </svg>
  );
}

function XIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M18 6 6 18" />
      <path d="m6 6 12 12" />
    </svg>
  );
}
